<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.chatservice.mapper.MemberChatroomMappingMapper">
    <!--
            CREATE TABLE member_chatroom_mapping (
              id BIGINT AUTO_INCREMENT PRIMARY KEY,
              member_id BIGINT NOT NULL,
              chatroom_id BIGINT NOT NULL,
              last_checked_at DATETIME,
              alias_name VARCHAR(255)
            );
        -->

    <!-- 1) insertMapping(mapping) -->
    <insert id="insertMapping" parameterType="MemberChatroomMapping">
        INSERT INTO member_chatroom_mapping
        (member_id, chatroom_id, last_checked_at, alias_name)
        VALUES
        (#{memberId}, #{chatroomId}, #{lastCheckedAt}, #{aliasName})
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 2) existsByMemberIdAndChatroomId(Long id, Long newChatroomId) -->
    <!--    - MyBatis는 다중 파라미터 시 param1, param2 로 접근 가능 -->
    <select id="existsByMemberIdAndChatroomId" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM member_chatroom_mapping
        WHERE member_id = #{param1}
          AND chatroom_id = #{param2}
    </select>

    <!-- 3) findByMemberIdAndChatroomId(Long id, Long chatroomId) -->
    <select id="findByMemberIdAndChatroomId" resultType="MemberChatroomMapping">
        SELECT id,
               member_id,
               chatroom_id,
               last_checked_at,
               alias_name
        FROM member_chatroom_mapping
        WHERE member_id = #{param1}
          AND chatroom_id = #{param2}
    </select>

    <!-- 4) updateMapping(mapping) -->
    <update id="updateMapping" parameterType="MemberChatroomMapping">
        UPDATE member_chatroom_mapping
        SET last_checked_at = #{lastCheckedAt},
            alias_name      = #{aliasName}
        WHERE id = #{id}
    </update>

    <!-- 5) deleteByMemberIdAndChatroomId(Long id, Long chatroomId) -->
    <delete id="deleteByMemberIdAndChatroomId">
        DELETE FROM member_chatroom_mapping
        WHERE member_id = #{param1}
          AND chatroom_id = #{param2}
    </delete>

    <!-- 6) findAllByChatroomId(Long chatroomId) -->
    <select id="findAllByChatroomId" parameterType="long" resultType="MemberChatroomMapping">
        SELECT id,
               member_id,
               chatroom_id,
               last_checked_at,
               alias_name
        FROM member_chatroom_mapping
        WHERE chatroom_id = #{chatroomId}
    </select>

    <!-- 7) findAllByMemberId(Long id) -->
    <select id="findAllByMemberId" parameterType="long" resultType="MemberChatroomMapping">
        SELECT id,
               member_id,
               chatroom_id,
               last_checked_at,
               alias_name
        FROM member_chatroom_mapping
        WHERE member_id = #{id}
    </select>
</mapper>